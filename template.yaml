AWSTemplateFormatVersion: 2010-09-09
Description: >-
  pets-api-portman
Transform:
- AWS::Serverless-2016-10-31

Resources:
  PetDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: name
          KeyType: RANGE
      TableName: pets
      BillingMode: PAY_PER_REQUEST
  
  AddPetsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-item.putItemHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Description: A Lambda function to insert data to the table
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          PET_TABLE_NAME: !Ref PetDynamoDBTable
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref PetDynamoDBTable

  PetsAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Pets API
      Description: This is a sample Petstore server.
      Parameters:
        endpointConfigurationTypes: REGIONAL
      Body: 
        openapi: 3.0.0
        info:
          description: |
            This is a sample Petstore server.  You can find
            out more about Swagger at
            [http://swagger.io](http://swagger.io) or on
            [irc.freenode.net, #swagger](http://swagger.io/irc/).
          version: "1.0.0"
          title: Swagger Petstore
          termsOfService: 'http://swagger.io/terms/'
          contact:
            email: apiteam@swagger.io
          license:
            name: Apache 2.0
            url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
        servers:
          # Added by API Auto Mocking Plugin
          - description: SwaggerHub API Auto Mocking
            url: https://virtserver.swaggerhub.com/filmfuthoem/pets-api/1.0.0
          - url: 'https://petstore.swagger.io/v2'
        tags:
          - name: pet
            description: Everything about your Pets
            externalDocs:
              description: Find out more
              url: 'http://swagger.io'
        paths:
          /pet:
            post:
              tags:
                - pet
              summary: Add a new pet to the store
              operationId: addPet
              responses:
                '200':
                  $ref: '#/components/responses/OK'
                '204':
                  $ref: '#/components/responses/NoContentUpdate'
                '400':
                  description: Invalid ID supplied
                '404':
                  description: Pet not found
                '405':
                  description: Validation exception
              requestBody:
                $ref: '#/components/requestBodies/Pet'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: 
                  !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddPetsFunction.Arn}/invocations
            # put:
            #   tags:
            #     - pet
            #   summary: Update an existing pet
            #   operationId: updatePet
            #   responses:
            #     '200':
            #       $ref: '#/components/responses/OK'
            #     '204':
            #       $ref: '#/components/responses/NoContentUpdate'
            #     '400':
            #       description: Invalid ID supplied
            #     '404':
            #       description: Pet not found
            #     '405':
            #       description: Validation exception
            #   requestBody:
            #     $ref: '#/components/requestBodies/Pet'
          # /pet/findByStatus:
          #   get:
          #     tags:
          #       - pet
          #     summary: Finds Pets by status
          #     description: Multiple status values can be provided with comma separated strings
          #     operationId: findPetsByStatus
          #     parameters:
          #       - name: status
          #         in: query
          #         description: Status values that need to be considered for filter
          #         required: true
          #         explode: true
          #         schema:
          #           type: array
          #           items:
          #             type: string
          #             enum:
          #               - available
          #               - pending
          #               - sold
          #             default: available
          #     x-amazon-apigateway-integration:
          #       type: http
          #       responses:
          #         default:
          #           statusCode: '200'
          #       httpMethod: GET
          #       uri: http://api.example.com
          #     responses:
          #       '200':
          #         description: successful operation
          #         content:
          #           application/json:
          #             schema:
          #               type: array
          #               items:
          #                 $ref: '#/components/schemas/Pet'
          #           application/xml:
          #             schema:
          #               type: array
          #               items:
          #                 $ref: '#/components/schemas/Pet'
          #       '400':
          #         description: Invalid status value
          # /pet/findByTags:
          #   get:
          #     tags:
          #       - pet
          #     summary: Finds Pets by tags
          #     description: >-
          #       Muliple tags can be provided with comma separated strings. Use\ \ tag1,
          #       tag2, tag3 for testing.
          #     operationId: findPetsByTags
          #     parameters:
          #       - name: tags
          #         in: query
          #         description: Tags to filter by
          #         required: true
          #         explode: true
          #         schema:
          #           type: array
          #           items:
          #             type: string
          #     x-amazon-apigateway-integration:
          #       type: http
          #       responses:
          #         default:
          #           statusCode: '200'
          #       httpMethod: GET
          #       uri: http://api.example.com
          #     responses:
          #       '200':
          #         description: successful operation
          #         content:
          #           application/json:
          #             schema:
          #               type: array
          #               items:
          #                 $ref: '#/components/schemas/Pet'
          #           application/xml:
          #             schema:
          #               type: array
          #               items:
          #                 $ref: '#/components/schemas/Pet'
          #       '400':
          #         description: Invalid tag value
          # /pet/{petId}:
            # get:
            #   tags:
            #     - pet
            #   summary: Find pet by ID
            #   description: Returns a single pet
            #   operationId: getPetById
            #   parameters:
            #     - name: petId
            #       in: path
            #       description: ID of pet to return
            #       required: true
            #       schema:
            #         type: integer
            #         format: int64
            #   x-amazon-apigateway-integration:
            #     type: http
            #     responses:
            #       default:
            #         statusCode: '200'
            #     httpMethod: GET
            #     uri: http://api.example.com
            #   responses:
            #     '200':
            #       description: successful operation
            #       content:
            #         application/json:
            #           schema:
            #             $ref: '#/components/schemas/Pet'
            #         application/xml:
            #           schema:
            #             $ref: '#/components/schemas/Pet'
            #     '400':
            #       description: Invalid ID supplied
            #     '404':
            #       description: Pet not found
            # post:
            #   tags:
            #     - pet
            #   summary: Updates a pet in the store with form data
            #   operationId: updatePetWithForm
            #   parameters:
            #     - name: petId
            #       in: path
            #       description: ID of pet that needs to be updated
            #       required: true
            #       schema:
            #         type: integer
            #         format: int64
            #   x-amazon-apigateway-integration:
            #     type: http
            #     responses:
            #       default:
            #         statusCode: '200'
            #     httpMethod: POST
            #     uri: http://api.example.com
            #   responses:
            #     '405':
            #       description: Invalid input
            #   requestBody:
            #     content:
            #       application/x-www-form-urlencoded:
            #         schema:
            #           type: object
            #           properties:
            #             name:
            #               description: Updated name of the pet
            #               type: string
            #             status:
            #               description: Updated status of the pet
            #               type: string
            # delete:
            #   tags:
            #     - pet
            #   summary: Deletes a pet
            #   operationId: deletePet
            #   parameters:
            #     - name: api_key
            #       in: header
            #       required: false
            #       schema:
            #         type: string
            #     - name: petId
            #       in: path
            #       description: Pet id to delete
            #       required: true
            #       schema:
            #         type: integer
            #         format: int64
            #   responses:
            #     '400':
            #       description: Invalid ID supplied
            #     '404':
            #       description: Pet not found
        externalDocs:
          description: Find out more about Swagger
          url: 'http://swagger.io'
        components:
          schemas:
            Category:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                name:
                  type: string
              xml:
                name: Category
            Tag:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                name:
                  type: string
              xml:
                name: Tag
            Pet:
              type: object
              required:
                - name
                - photoUrls
              properties:
                id:
                  type: integer
                  format: int64
                category:
                  $ref: '#/components/schemas/Category'
                name:
                  type: string
                  example: doggie
                photoUrls:
                  type: array
                  xml:
                    name: photoUrl
                    wrapped: true
                  items:
                    type: string
                tags:
                  type: array
                  xml:
                    name: tag
                    wrapped: true
                  items:
                    $ref: '#/components/schemas/Tag'
                status:
                  type: string
                  description: pet status in the store
                  enum:
                    - available
                    - pending
                    - sold
              xml:
                name: Pet
          requestBodies:
            Pet:
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Pet'
              description: Pet object that needs to be added to the store
              required: true
          responses:
            OK: #200
              description: The request validated successfully but did not commit
            NoContentUpdate: #204
              description: The request succeeded and updated an existing resource.
  
  # https://aws.amazon.com/premiumsupport/knowledge-center/api-gateway-rest-api-lambda-integrations/
  PetApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref AddPetsFunction
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PetsAPI}/*/POST/pet"